let ss = SpreadsheetApp.getActiveSpreadsheet();
let prefSheet = ss.getSheetByName("Dashboard");
let logSheet = ss.getSheetByName("Data");
let apiKey = prefSheet.getRange("B1").getValue();
let hiddenSheet = ss.getSheetByName("Metadata");

function writeUpdateMessage(message) {
  let time = getTime(new Date().getTime()/1000);
  writeSingleValue(prefSheet, "B2", time);
  writeSingleValue(prefSheet, "B3", message);
}
function getTime(timestamp) {
  //timestamp in milliseconds
  return Utilities.formatDate(new Date(timestamp*1000), "GMT", "dd MMMM yyyy  hh:mm:ss a");
}

function myFunction() {
  let url = "https://api.torn.com/user/?selections=events&key="+apiKey;
  try {
    let data = JSON.parse(UrlFetchApp.fetch(url));
    if (data["error"]) {
       writeUpdateMessage(data["error"]["error"]);
      return;
    } else if (data["events"]) {
      let last_entry = hiddenSheet.getRange("B1").getValue();
      let timestampArray = [];
      for (const identifier in data["events"]) {
        let event = data["event"][identifier];
        timestampArray.push(event["timestamp"]);

        if (revive["timestamp"] > last_entry) {
          given_array.push([revive["timestamp"], getTime(revive["timestamp"]), revive["reviver_name"], revive["reviver_id"], checkFaultyString (revive["reviver_factionname"]), revive["reviver_faction"], revive["target_name"], revive["target_id"], revive["target_faction"], checkFaultyString (revive["target_factionname"]), revive["target_hospital_reason"].replace(/<[^>]+>/g, ""), revive["target_last_action"]["timestamp"], getLastAction(revive["timestamp"], revive["target_last_action"]["timestamp"]), revive["target_last_action"]["status"]]);
        } 
      }

      let noOfRevivesGiven = given_array.length;
      let noOfRevivesReceived = received_array.length;
      if (noOfRevivesGiven > 0) {
        logSheet1.insertRowsAfter(1, noOfRevivesGiven);
        logSheet1.getRange(2, 1, noOfRevivesGiven, 14).setValues(given_array);
        logSheet1.sort(1, false);
      }

      if (noOfRevivesReceived > 0) {
        logSheet2.insertRowsAfter(1, noOfRevivesReceived);
        logSheet2.getRange(2, 1, noOfRevivesReceived, 14).setValues(received_array);
        logSheet2.sort(1, false)
      }
      if (timestampArray.length > 0) {
        let last_array = timestampArray.sort(function(a, b) {
          return a - b;
        });
        let timestamp = last_array[last_array.length - 1];
        hiddenSheet.getRange("D1").setValue(timestamp);
        prefSheet.getRange("B2").setValue(getTime(new Date().getTime()/1000));
        prefSheet.getRange("B3").setValue("Successfully Updated");
      }
    }
    let noOfRows = filterSheet.getMaxRows();
    let noOfRows = filterSheet.getMaxRows();
    if (noOfRows > 100) {
      filterSheet.deleteRows(101, noOfRows-100);
    }
  }
  catch(error) {
    prefSheet.getRange("B3").setValue(error.message);
  }
}
